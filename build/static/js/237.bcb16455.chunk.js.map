{"version":3,"file":"static/js/237.bcb16455.chunk.js","mappings":"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","sources":["pages/Experiences/index.tsx"],"sourcesContent":["import PageCard from \"@/components/PageCard\"\nimport { Experience, Tag as TTag } from \"@/types\"\nimport {\n    Button,\n    Checkbox,\n    Form,\n    Input,\n    InputNumber,\n    Modal,\n    Select,\n    Space,\n    Table,\n    Tag,\n} from \"antd\"\nimport { ColumnsType } from \"antd/es/table\"\nimport { useState } from \"react\"\nimport { useLoaderData } from \"react-router-dom\"\nimport * as api from \"@/requests\"\nimport { ExclamationCircleFilled } from \"@ant-design/icons\"\n\nexport const loader = async () => {\n    return {\n        experiences: await api.listExperiences(),\n        tags: await api.listTags(),\n    }\n}\n\nconst colors: string[] = [\n    \"magenta\",\n    \"volcano\",\n    \"gold\",\n    \"cyan\",\n    \"geekblue\",\n    \"purple\",\n]\n\nconst Experiences = () => {\n    const loaderData = useLoaderData() as {\n        experiences: Experience[]\n        tags: TTag[]\n    }\n\n    const [isModalAddExperienceOpen, setIsModalAddExperienceOpen] =\n        useState(false)\n    const [\n        isModalAddExperienceConfirmLoading,\n        setIsModalAddExperienceConfirmLoading,\n    ] = useState(false)\n    const [formAddExperience] = Form.useForm()\n\n    const [isModalEditExperienceOpen, setIsModalEditExperienceOpen] =\n        useState(false)\n    const [\n        isModalEditExperienceConfirmLoading,\n        setIsModalEditExperienceConfirmLoading,\n    ] = useState(false)\n    const [formEditExperience] = Form.useForm()\n\n    const [experiences, setExperiences] = useState(loaderData.experiences)\n    const [tags] = useState(loaderData.tags)\n\n    const showDeleteConfirm = (experience: Experience) => {\n        Modal.confirm({\n            title: \"This action is not reversible.\",\n            icon: <ExclamationCircleFilled />,\n            content: (\n                <>\n                    {`Are you sure to delete this experience (${experience.company})?`}\n                    <br />\n                    {`This action is not reversible.`}\n                </>\n            ),\n            okText: \"Yes\",\n            okType: \"danger\",\n            cancelText: \"No\",\n            onOk: async () => {\n                await api.deleteExperience(experience.id)\n                refreshExperience()\n            },\n        })\n    }\n\n    const showModalEditExperience = (experience: Experience) => {\n        formEditExperience.setFieldValue(\"id\", experience.id)\n        formEditExperience.setFieldValue(\"sort\", experience.sort)\n        formEditExperience.setFieldValue(\"name\", experience.name)\n        formEditExperience.setFieldValue(\"timeline\", experience.timeline)\n        formEditExperience.setFieldValue(\"roles\", experience.roles)\n        formEditExperience.setFieldValue(\"company\", experience.company)\n        formEditExperience.setFieldValue(\"description\", experience.description)\n        formEditExperience.setFieldValue(\"visible\", experience.visible)\n        formEditExperience.setFieldValue(\"tags\", experience.tags)\n        setIsModalEditExperienceOpen(true)\n    }\n\n    const updateExperience = async (values: any) => {\n        try {\n            setIsModalEditExperienceConfirmLoading(true)\n            await api.updateExperience(values.id, {\n                name: values.name,\n                company: values.company,\n                timeline: values.timeline,\n                description: values.description.trimStart(),\n                visible: values.visible ? true : false,\n                roles: values.roles,\n                tags: values.tags,\n                sort: values.sort,\n            })\n            setIsModalEditExperienceOpen(false)\n            refreshExperience()\n        } catch (err) {\n        } finally {\n            setIsModalEditExperienceConfirmLoading(false)\n        }\n    }\n\n    const columns: ColumnsType<Experience> = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n        },\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n        },\n        {\n            title: \"Company\",\n            dataIndex: \"company\",\n        },\n        {\n            title: \"Timeline\",\n            dataIndex: \"timeline\",\n        },\n        {\n            title: \"Short Description\",\n            key: \"descriptions\",\n            render: (_, { description }) => <>{description.split(\"\\n\")[0]}</>,\n        },\n        {\n            title: \"Visibility\",\n            key: \"visible\",\n            render: (_, { visible }) => (\n                <Tag color={!visible ? \"red\" : \"green\"}>\n                    {visible ? \"TRUE\" : \"FALSE\"}\n                </Tag>\n            ),\n        },\n        {\n            title: \"Roles\",\n            key: \"roles\",\n            render: (_, { roles }) => (\n                <>\n                    {roles.map((role) => {\n                        let color =\n                            colors[Math.floor(Math.random() * colors.length)]\n                        return (\n                            <Tag color={color} key={role}>\n                                {role}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: \"Tags\",\n            key: \"tags\",\n            render: (_, { tags }) => (\n                <>\n                    {tags.map((tag) => {\n                        let color =\n                            colors[Math.floor(Math.random() * colors.length)]\n                        return (\n                            <Tag color={color} key={tag}>\n                                {tag.toUpperCase()}\n                            </Tag>\n                        )\n                    })}\n                </>\n            ),\n        },\n        {\n            title: \"Sort\",\n            dataIndex: \"sort\",\n        },\n        {\n            title: \"Action\",\n            key: \"action\",\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <Button\n                        onClick={() => showModalEditExperience(record)}\n                        type=\"link\"\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        onClick={() => showDeleteConfirm(record)}\n                        type=\"link\"\n                    >\n                        Delete\n                    </Button>\n                </Space>\n            ),\n        },\n    ]\n\n    const refreshExperience = async () => {\n        setExperiences(await api.listExperiences())\n    }\n\n    const addExperience = async (values: any) => {\n        try {\n            setIsModalAddExperienceConfirmLoading(true)\n            await api.addExperience(\n                values.name,\n                values.timeline,\n                values.roles,\n                values.company,\n                values.description.trimStart(),\n                values.tags,\n                values.visible ? true : false,\n                values.sort,\n            )\n            setIsModalAddExperienceOpen(false)\n            refreshExperience()\n        } catch (err) {\n        } finally {\n            setIsModalAddExperienceConfirmLoading(false)\n        }\n    }\n    return (\n        <>\n            <PageCard\n                title=\"Experiences\"\n                extra={\n                    <Button onClick={() => setIsModalAddExperienceOpen(true)}>\n                        Add Experience\n                    </Button>\n                }\n            >\n                <Table columns={columns} dataSource={experiences} rowKey=\"id\" />\n            </PageCard>\n            <Modal\n                title=\"Add Experience\"\n                open={isModalAddExperienceOpen}\n                onOk={() => formAddExperience.submit()}\n                onCancel={() => setIsModalAddExperienceOpen(false)}\n                confirmLoading={isModalAddExperienceConfirmLoading}\n                afterClose={() => formAddExperience.resetFields()}\n            >\n                <Form\n                    name=\"formAddExperience\"\n                    form={formAddExperience}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                    style={{ maxWidth: 600 }}\n                    onFinish={(values) => {\n                        // console.log(values)\n                        addExperience(values)\n                    }}\n                    autoComplete=\"off\"\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your experience name!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Company\"\n                        name=\"company\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your company name!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Timeline\"\n                        name=\"timeline\"\n                        rules={[\n                            {\n                                required: true,\n                                message:\n                                    \"Please input your experience timeline!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                        rules={[\n                            {\n                                required: true,\n                                message:\n                                    \"Please input your experience description!\",\n                            },\n                        ]}\n                    >\n                        <Input.TextArea rows={12} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Visibility\"\n                        name=\"visible\"\n                        valuePropName=\"checked\"\n                    >\n                        <Checkbox />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Roles\"\n                        name=\"roles\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your role!\",\n                            },\n                        ]}\n                    >\n                        <Select mode=\"tags\" style={{ width: \"100%\" }} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Tags\"\n                        name=\"tags\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your tags!\",\n                            },\n                        ]}\n                    >\n                        <Select\n                            mode=\"multiple\"\n                            allowClear\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please select\"\n                            options={tags.map((tag) => {\n                                return { label: tag.tag, value: tag.tag }\n                            })}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"Sort\" name=\"sort\" rules={[\n                            {\n                                required: true,\n                                message: \"Please input a sorting number!\",\n                            },\n                        ]}>\n                        <InputNumber />\n                    </Form.Item>\n                </Form>\n            </Modal>\n            <Modal\n                title=\"Edit Experience\"\n                open={isModalEditExperienceOpen}\n                onOk={() => formEditExperience.submit()}\n                onCancel={() => setIsModalEditExperienceOpen(false)}\n                confirmLoading={isModalEditExperienceConfirmLoading}\n                afterClose={() => formEditExperience.resetFields()}\n            >\n                <Form\n                    name=\"formEditExperience\"\n                    form={formEditExperience}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                    style={{ maxWidth: 600 }}\n                    onFinish={(values) => {\n                        // console.log(values)\n                        updateExperience(values)\n                    }}\n                    autoComplete=\"off\"\n                >\n                    <Form.Item label=\"id\" name=\"id\" hidden>\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Company\"\n                        name=\"company\"\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Timeline\"\n                        name=\"timeline\"\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                    >\n                        <Input.TextArea rows={12} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Visibility\"\n                        name=\"visible\"\n                        valuePropName=\"checked\"\n                    >\n                        <Checkbox />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Roles\"\n                        name=\"roles\"\n                    >\n                        <Select mode=\"tags\" style={{ width: \"100%\" }} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Tags\"\n                        name=\"tags\"\n                    >\n                        <Select\n                            mode=\"multiple\"\n                            allowClear\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please select\"\n                            options={tags.map((tag) => {\n                                return { label: tag.tag, value: tag.tag }\n                            })}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"sort\" name=\"sort\">\n                        <InputNumber />\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </>\n    )\n}\n\nexport const Component = Experiences\nexport default Experiences\n"],"names":["loader","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","api","t0","sent","t1","abrupt","experiences","tags","stop","apply","arguments","colors","Experiences","loaderData","useLoaderData","_useState","useState","_useState2","_slicedToArray","isModalAddExperienceOpen","setIsModalAddExperienceOpen","_useState3","_useState4","isModalAddExperienceConfirmLoading","setIsModalAddExperienceConfirmLoading","_Form$useForm","Form","useForm","formAddExperience","_useState5","_useState6","isModalEditExperienceOpen","setIsModalEditExperienceOpen","_useState7","_useState8","isModalEditExperienceConfirmLoading","setIsModalEditExperienceConfirmLoading","_Form$useForm3","formEditExperience","_useState9","_useState10","setExperiences","_useState11","updateExperience","_ref2","_callee3","values","_context3","id","name","company","timeline","description","trimStart","visible","roles","sort","refreshExperience","finish","_x","columns","title","dataIndex","key","render","_","_ref3","_jsx","_Fragment","children","split","_ref4","Tag","color","_ref5","map","role","Math","floor","random","length","_ref6","tag","toUpperCase","record","_jsxs","Space","size","Button","onClick","experience","setFieldValue","type","Modal","confirm","icon","ExclamationCircleFilled","content","concat","okText","okType","cancelText","onOk","_onOk","_callee2","_context2","_ref7","_callee4","_context4","addExperience","_ref8","_callee5","_context5","_x2","PageCard","extra","Table","dataSource","rowKey","open","submit","onCancel","confirmLoading","afterClose","resetFields","form","labelCol","span","wrapperCol","style","maxWidth","onFinish","autoComplete","Item","label","rules","required","message","Input","TextArea","rows","valuePropName","Checkbox","Select","mode","width","allowClear","placeholder","options","value","InputNumber","hidden","Component"],"sourceRoot":""}