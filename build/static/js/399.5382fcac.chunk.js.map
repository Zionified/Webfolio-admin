{"version":3,"file":"static/js/399.5382fcac.chunk.js","mappings":"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","sources":["pages/Projects/index.tsx"],"sourcesContent":["import PageCard from \"@/components/PageCard\"\nimport { Project, Tag as TTag } from \"@/types\"\nimport {\n    Button,\n    Checkbox,\n    Form,\n    Input,\n    InputNumber,\n    Modal,\n    Select,\n    Space,\n    Table,\n    Tag,\n    message,\n} from \"antd\"\nimport { ColumnsType } from \"antd/es/table\"\nimport * as api from \"@/requests\"\nimport { useLoaderData } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { ExclamationCircleFilled } from \"@ant-design/icons\"\n\nexport const loader = async () => {\n    return { projects: await api.listProjects(), tags: await api.listTags() }\n}\n\nconst colors: string[] = [\n    \"magenta\",\n    \"volcano\",\n    \"gold\",\n    \"cyan\",\n    \"geekblue\",\n    \"purple\",\n]\n\nconst IMG = styled.img`\n    height: 40px;\n    width: 40px;\n`\nconst Projects = () => {\n    const loaderData = useLoaderData() as { projects: Project[]; tags: TTag[] }\n    const [projects, setProjects] = useState(loaderData.projects)\n    const [tags] = useState(loaderData.tags)\n\n    const [isModalAddProjectOpen, setIsModalAddProjectOpen] = useState(false)\n    const [\n        isModalAddProjectConfirmLoading,\n        setIsModalAddProjectConfirmLoading,\n    ] = useState(false)\n    const [formAddProject] = Form.useForm()\n\n    const [isModalEditProjectOpen, setIsModalEditProjectOpen] = useState(false)\n    const [\n        isModalEditProjectConfirmLoading,\n        setIsModalEditProjectConfirmLoading,\n    ] = useState(false)\n    const [formEditProject] = Form.useForm()\n\n    // const [selectedProject, setSelectedProject] = useState<Project | null>(null)\n\n    const showDeleteConfirm = (project: Project) => {\n        Modal.confirm({\n            title: \"This action is not reversible.\",\n            icon: <ExclamationCircleFilled />,\n            content: (\n                <>\n                    {`Are you sure to delete this experience (${project.title})?`}\n                    <br />\n                    {`This action is not reversible.`}\n                </>\n            ),\n            okText: \"Yes\",\n            okType: \"danger\",\n            cancelText: \"No\",\n            onOk: async () => {\n                await api.deleteProject(project.id)\n                message.success(\"Deleted successfully\")\n                refreshProjects()\n            },\n        })\n    }\n\n    const showModalEditProject = (project: Project) => {\n        formEditProject.setFieldValue(\"id\", project.id)\n        formEditProject.setFieldValue(\"name\", project.name)\n        formEditProject.setFieldValue(\"sort\", project.sort)\n        formEditProject.setFieldValue(\"title\", project.title)\n        formEditProject.setFieldValue(\"image\", project.image)\n        formEditProject.setFieldValue(\"description\", project.description)\n        formEditProject.setFieldValue(\"visible\", project.visible)\n        formEditProject.setFieldValue(\"github\", project.github)\n        formEditProject.setFieldValue(\"starCount\", project.starCount)\n        formEditProject.setFieldValue(\"installCount\", project.installCount)\n        formEditProject.setFieldValue(\"tags\", project.tags)\n        setIsModalEditProjectOpen(true)\n    }\n\n    const updateProject = async (values: any) => {\n        try {\n            setIsModalEditProjectConfirmLoading(true)\n            const visible = values.visible ? true : false\n            await api.updateProject(values.id, {\n                title: values.title,\n                description: values.description.trimStart(),\n                name: values.name,\n                image: values.image,\n                visible: visible,\n                tags: values.tags,\n                github: values.github,\n                starCount: values.starCount ? values.starCount : 0,\n                installCount: values.installCount ? values.installCount : 0,\n                sort: values.sort,\n            })\n            message.success(\"Updated successfully\")\n            setIsModalEditProjectOpen(false)\n            // setSelectedProject(null)\n            refreshProjects()\n        } catch (err) {\n        } finally {\n            setIsModalEditProjectConfirmLoading(false)\n        }\n    }\n\n    const columns: ColumnsType<Project> = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n        },\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n        },\n        {\n            title: \"Sort\",\n            dataIndex: \"sort\",\n        },\n        {\n            title: \"Image\",\n            key: \"image\",\n            render: (_, { image }) => <IMG src={image}></IMG>,\n        },\n        {\n            title: \"Project\",\n            dataIndex: \"title\",\n        },\n        {\n            title: \"Short Description\",\n            key: \"descriptions\",\n            render: (_, { description }) => <>{description.split(\"\\n\")[0]}</>,\n        },\n        {\n            title: \"Visibility\",\n            key: \"visible\",\n            render: (_, { visible }) => (\n                <Tag color={!visible ? \"red\" : \"green\"}>\n                    {visible ? \"TRUE\" : \"FALSE\"}\n                </Tag>\n            ),\n        },\n        {\n            title: \"Tags\",\n            key: \"tags\",\n            render: (_, { tags }) =>\n                tags && (\n                    <>\n                        {tags.map((tag) => {\n                            let color =\n                                colors[\n                                    Math.floor(Math.random() * colors.length)\n                                ]\n                            return (\n                                <Tag color={color} key={tag}>\n                                    {tag.toUpperCase()}\n                                </Tag>\n                            )\n                        })}\n                    </>\n                ),\n        },\n        {\n            title: \"Star Count\",\n            key: \"starCount\",\n            render: (_, { starCount }) => starCount && <>{starCount}</>,\n        },\n        {\n            title: \"Install Count\",\n            key: \"installCount\",\n            render: (_, { installCount }) =>\n                installCount && <>{installCount}</>,\n        },\n        {\n            title: \"Sort\",\n            dataIndex: \"sort\",\n        },\n        {\n            title: \"Action\",\n            key: \"action\",\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <Button\n                        onClick={() => showModalEditProject(record)}\n                        type=\"link\"\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        onClick={() => showDeleteConfirm(record)}\n                        type=\"link\"\n                    >\n                        Delete\n                    </Button>\n                </Space>\n            ),\n        },\n    ]\n\n    const refreshProjects = async () => {\n        setProjects(await api.listProjects())\n    }\n\n    const addProject = async (values: any) => {\n        try {\n            setIsModalAddProjectConfirmLoading(true)\n            const visible = values.visible ? true : false\n            await api.addProject(\n                values.title,\n                values.name,\n                values.description.trimStart(),\n                values.image,\n                visible,\n                values.tags ? values.tags : [],\n                values.sort,\n                values.github ? values.github : \"\",\n                values.starCount ? values.starCount : 0,\n                values.installCount ? values.installCount : 0\n            )\n            message.success(\"Added successfully\")\n            setIsModalAddProjectOpen(false)\n            refreshProjects()\n        } catch (err) {\n        } finally {\n            setIsModalAddProjectConfirmLoading(false)\n        }\n    }\n    return (\n        <>\n            <PageCard\n                title=\"Projects\"\n                extra={\n                    <Button onClick={() => setIsModalAddProjectOpen(true)}>\n                        Add Project\n                    </Button>\n                }\n            >\n                <Table columns={columns} dataSource={projects} rowKey=\"id\" />\n            </PageCard>\n            <Modal\n                title=\"Add Project\"\n                open={isModalAddProjectOpen}\n                onOk={() => formAddProject.submit()}\n                onCancel={() => setIsModalAddProjectOpen(false)}\n                confirmLoading={isModalAddProjectConfirmLoading}\n                afterClose={() => formAddProject.resetFields()}\n            >\n                <Form\n                    name=\"formAddProject\"\n                    form={formAddProject}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                    style={{ maxWidth: 600 }}\n                    onFinish={(values) => {\n                        // console.log(values)\n                        addProject(values)\n                    }}\n                    autoComplete=\"off\"\n                >\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your project's name!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Project\"\n                        name=\"title\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your project title!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Image Link\"\n                        name=\"image\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Please input your image link!\",\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Description\"\n                        name=\"description\"\n                        rules={[\n                            {\n                                required: true,\n                                message:\n                                    \"Please input your project description!\",\n                            },\n                        ]}\n                    >\n                        <Input.TextArea rows={12} />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Visibility\"\n                        name=\"visible\"\n                        valuePropName=\"checked\"\n                    >\n                        <Checkbox />\n                    </Form.Item>\n                    <Form.Item label=\"Github\" name=\"github\">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label=\"Star Count\" name=\"starCount\">\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item label=\"Installation Count\" name=\"installCount\">\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item label=\"Tags\" name=\"tags\">\n                        <Select\n                            mode=\"multiple\"\n                            allowClear\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please select\"\n                            options={tags.map((tag) => {\n                                return { label: tag.tag, value: tag.tag }\n                            })}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Sort\"\n                        name=\"sort\"\n                        rules={[\n                            {\n                                required: true,\n                                message:\n                                    \"Please input your project sorting number!\",\n                            },\n                        ]}\n                    >\n                        <InputNumber />\n                    </Form.Item>\n                </Form>\n            </Modal>\n            <Modal\n                title=\"Edit Project\"\n                open={isModalEditProjectOpen}\n                onOk={() => formEditProject.submit()}\n                onCancel={() => setIsModalEditProjectOpen(false)}\n                confirmLoading={isModalEditProjectConfirmLoading}\n                afterClose={() => formEditProject.resetFields()}\n            >\n                {/* {selectedProject && ( */}\n                <Form\n                    name=\"formEditProject\"\n                    form={formEditProject}\n                    labelCol={{ span: 8 }}\n                    wrapperCol={{ span: 16 }}\n                    style={{ maxWidth: 600 }}\n                    onFinish={(values) => {\n                        // console.log(values)\n                        updateProject(values)\n                    }}\n                    // initialValues={{\n                    //     id: selectedProject.id,\n                    //     sort: selectedProject.sort,\n                    //     title: selectedProject.title,\n                    //     image: selectedProject.image,\n                    //     description: selectedProject.description.reduce(\n                    //         (prev, curr) => prev.concat(\"\\n\", curr)\n                    //     ),\n                    //     visible: selectedProject.visible,\n                    //     starCount: selectedProject.starCount,\n                    //     installCount: selectedProject.installCount,\n                    //     tags: selectedProject.tags,\n                    // }}\n                    autoComplete=\"off\"\n                >\n                    <Form.Item label=\"id\" name=\"id\" hidden>\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item label=\"Name\" name=\"name\">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label=\"Project\" name=\"title\">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label=\"Image Link\" name=\"image\">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label=\"Description\" name=\"description\">\n                        <Input.TextArea rows={12} />\n                    </Form.Item>\n                    <Form.Item label=\"Github\" name=\"github\">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label=\"Star Count\" name=\"starCount\">\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item label=\"Installation Count\" name=\"installCount\">\n                        <InputNumber />\n                    </Form.Item>\n                    <Form.Item label=\"Tags\" name=\"tags\">\n                        <Select\n                            mode=\"multiple\"\n                            allowClear\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please select\"\n                            options={tags.map((tag) => {\n                                return { label: tag.tag, value: tag.tag }\n                            })}\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Visibility\"\n                        name=\"visible\"\n                        valuePropName=\"checked\"\n                    >\n                        <Checkbox />\n                    </Form.Item>\n                    <Form.Item label=\"Sort\" name=\"sort\">\n                        <InputNumber />\n                    </Form.Item>\n                </Form>\n                {/* )} */}\n            </Modal>\n        </>\n    )\n}\n\nexport const Component = Projects\nexport default Projects\n"],"names":["loader","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","api","t0","sent","t1","abrupt","projects","tags","stop","apply","arguments","colors","IMG","styled","img","_templateObject","_taggedTemplateLiteral","Projects","loaderData","useLoaderData","_useState","useState","_useState2","_slicedToArray","setProjects","_useState3","_useState5","_useState6","isModalAddProjectOpen","setIsModalAddProjectOpen","_useState7","_useState8","isModalAddProjectConfirmLoading","setIsModalAddProjectConfirmLoading","_Form$useForm","Form","useForm","formAddProject","_useState9","_useState10","isModalEditProjectOpen","setIsModalEditProjectOpen","_useState11","_useState12","isModalEditProjectConfirmLoading","setIsModalEditProjectConfirmLoading","_Form$useForm3","formEditProject","updateProject","_ref2","_callee3","values","visible","_context3","id","title","description","trimStart","name","image","github","starCount","installCount","sort","message","success","refreshProjects","finish","_x","columns","dataIndex","key","render","_","_ref3","_jsx","src","_ref4","_Fragment","children","split","_ref5","Tag","color","_ref6","map","tag","Math","floor","random","length","toUpperCase","_ref7","_ref8","record","_jsxs","Space","size","Button","onClick","project","setFieldValue","type","Modal","confirm","icon","ExclamationCircleFilled","content","concat","okText","okType","cancelText","onOk","_onOk","_callee2","_context2","_ref9","_callee4","_context4","addProject","_ref10","_callee5","_context5","_x2","PageCard","extra","Table","dataSource","rowKey","open","submit","onCancel","confirmLoading","afterClose","resetFields","form","labelCol","span","wrapperCol","style","maxWidth","onFinish","autoComplete","Item","label","rules","required","Input","TextArea","rows","valuePropName","Checkbox","InputNumber","Select","mode","allowClear","width","placeholder","options","value","hidden","Component"],"sourceRoot":""}